//Code generated by xproto [v0.1.0], DO NOT EDIT.
//source: [helloworld.proto]
//Package [helloworld] is a generated stub package.
//This code was generated with github.com/donutloop/xservice [v0.1.0]
//It is generated from these files:
//	 [helloworld.proto]
//package [helloworld]

package helloworld

import (
	"bytes"
	"context"
	"fmt"
	"log"
	"net/http"
	"strings"

	"github.com/donutloop/xservice/framework/errors"
	"github.com/donutloop/xservice/framework/hooks"
	"github.com/donutloop/xservice/framework/server"
	"github.com/donutloop/xservice/framework/transport"
	"github.com/donutloop/xservice/framework/xcontext"
	"github.com/donutloop/xservice/framework/xhttp"
	jsonpb "github.com/golang/protobuf/jsonpb"
)

// //[HelloWorldPathPrefix HelloWorld] is used for all URL paths on a %!s(MISSING) server.
//Requests are always: POST [HelloWorldPathPrefix] /method
//It can be used in an HTTP mux to route requests
const HelloWorldPathPrefix string = "/xservice/example.helloworld.HelloWorld/"

// 143 bytes of a gzipped FileDescriptorProto
var xserviceFileDescriptor0 = []byte{0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0x48, 0xcd, 0xc9, 0xc9, 0x2f, 0xcf, 0x2f, 0xca, 0x49, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4a, 0xad, 0x48, 0xcc, 0x2d, 0xc8, 0x49, 0xd5, 0x43, 0xc8, 0x28, 0xa9, 0x70, 0x71, 0x78, 0x80, 0x78, 0x41, 0xa9, 0x85, 0x42, 0x12, 0x5c, 0xec, 0xc5, 0xa5, 0x49, 0x59, 0xa9, 0xc9, 0x25, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30, 0xae, 0x92, 0x3c, 0x17, 0x27, 0x54, 0x55, 0x71, 0x81, 0x90, 0x10, 0x17, 0x4b, 0x49, 0x6a, 0x05, 0x4c, 0x0d, 0x98, 0x6d, 0x14, 0xc4, 0xc5, 0x05, 0x56, 0x10, 0x0e, 0x32, 0x54, 0xc8, 0x85, 0x8b, 0x15, 0xcc, 0x13, 0x92, 0xd1, 0xc3, 0xb4, 0x52, 0x0f, 0x66, 0x9f, 0x94, 0x2c, 0x1e, 0xd9, 0xe2, 0x02, 0x27, 0x9e, 0x28, 0x2e, 0x84, 0x78, 0x12, 0x1b, 0xd8, 0x0f, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x65, 0x34, 0xd5, 0xb9, 0xd7, 0x00, 0x00, 0x00}

type HelloWorld interface {
	Hello(ctx context.Context, req *HelloReq) (*HelloResp, error)
}

type helloWorldJSONClient struct {
	client transport.HTTPClient
	urls   [1]string
}

func (c *helloWorldJSONClient) Hello(ctx context.Context, in *HelloReq) (*HelloResp, error) {
	ctx = xcontext.WithPackageName(ctx, "example.helloworld")
	ctx = xcontext.WithServiceName(ctx, "HelloWorld")
	ctx = xcontext.WithMethodName(ctx, "Hello")
	out := new(HelloResp)
	err := transport.DoJSONRequest(ctx, c.client, c.urls[0], in, out)
	return out, err
}

type helloWorldServer struct {
	HelloWorld
	hooks        *hooks.ServerHooks
	logErrorFunc transport.LogErrorFunc
}

func (s *helloWorldServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	transport.WriteErrorAndTriggerHooks(ctx, resp, err, s.hooks)
}

func (s *helloWorldServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = xcontext.WithPackageName(ctx, "example.helloworld")
	ctx = xcontext.WithServiceName(ctx, "HelloWorld")
	ctx = xcontext.WithResponseWriter(ctx, resp)
	var err error
	ctx, err = transport.CallRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if req.Method != http.MethodPost {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		terr := errors.BadRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, terr)
		return
	}

	switch req.URL.Path {
	case "/xservice/example.helloworld.HelloWorld/Hello":
		s.serveHello(ctx, resp, req)
		return

	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		terr := errors.BadRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, terr)
		return
	}

}

func (s *helloWorldServer) serveHello(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get(xhttp.ContentTypeHeader)
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	modifiedHeader := strings.ToLower(header[:i])
	modifiedHeader = strings.TrimSpace(modifiedHeader)
	if modifiedHeader == xhttp.ApplicationJson {
		s.serveHelloJSON(ctx, resp, req)
	} else {
		msg := fmt.Sprintf("unexpected Content-Type: %q", header)
		terr := errors.BadRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, terr)
	}
	return
}

func (s *helloWorldServer) serveHelloJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = xcontext.WithMethodName(ctx, "Hello")
	ctx, err = transport.CallRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	defer transport.Closebody(req.Body)

	reqContent := new(HelloReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	err = unmarshaler.Unmarshal(req.Body, reqContent)
	if err != nil {
		err = errors.WrapErr(err, "failed to parse request json")
		terr := errors.InternalErrorWith(err)
		s.logErrorFunc("%v", err)
		s.writeError(ctx, resp, terr)
		return
	}
	respContent := new(HelloResp)
	responseCallWrapper := func() {
		responseDeferWrapper := func() {
			r := recover()
			if r != nil {
				terr := errors.InternalError("Internal service panic")
				s.writeError(ctx, resp, terr)
				panic(r)
			}
		}
		defer responseDeferWrapper()

		respContent, err = s.Hello(ctx, reqContent)
	}
	responseCallWrapper()
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		terr := errors.InternalError("received a nil * HelloResp, and nil error while calling Hello. nil responses are not supported")
		s.logErrorFunc("%v", err)
		s.writeError(ctx, resp, terr)
		return
	}
	ctx = transport.CallResponsePrepared(ctx, s.hooks)
	buff := new(bytes.Buffer)
	marshaler := &jsonpb.Marshaler{OrigName: true}
	err = marshaler.Marshal(buff, respContent)
	if err != nil {
		err = errors.WrapErr(err, "failed to marshal json response")
		terr := errors.InternalErrorWith(err)
		s.logErrorFunc("%v", err)
		s.writeError(ctx, resp, terr)
		return
	}
	ctx = xcontext.WithStatusCode(ctx, http.StatusOK)
	req.Header.Set(xhttp.ContentTypeHeader, xhttp.ApplicationJson)
	resp.WriteHeader(http.StatusOK)
	respBytes := buff.Bytes()
	_, err = resp.Write(respBytes)
	if err != nil {
		s.logErrorFunc("error while writing response to client, but already sent response status code to 200: %s", err)
		resp.WriteHeader(http.StatusInternalServerError)
		return
	}
	transport.CallResponseSent(ctx, s.hooks)
}

func (s *helloWorldServer) ServiceDescriptor() ([]uint8, int) {
	return xserviceFileDescriptor0, 0
}

func (s *helloWorldServer) ProtocGenXServiceVersion() string {
	return "v0.1.0"
}

func NewHelloWorldJSONClient(addr string, client transport.HTTPClient) HelloWorld {
	URLBase := transport.UrlBase(addr)
	prefix := URLBase + HelloWorldPathPrefix
	urls := [1]string{
		prefix + "Hello",
	}
	httpClient, ok := client.(*http.Client)
	if ok == true {
		httpClient = transport.WithoutRedirects(httpClient)
		return &helloWorldJSONClient{
			client: httpClient,
			urls:   urls,
		}
	}
	return &helloWorldJSONClient{
		client: client,
		urls:   urls,
	}
}
func NewHelloWorldServer(svc HelloWorld, hooks *hooks.ServerHooks, errorFunc ...transport.LogErrorFunc) server.Server {
	server := &helloWorldServer{
		HelloWorld: svc,
		hooks:      hooks,
	}
	if len(errorFunc) == 1 {
		server.logErrorFunc = errorFunc[0]
	} else {
		server.logErrorFunc = log.Printf
	}
	return server
}
